#!/bin/bash

set -euxo pipefail
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([genblastg_threshold_syntenic],[s],[After searching orthologs in syntenic region of counterpart species, identity larger than %f are used as best ortholog],[0.8])
# ARG_OPTIONAL_SINGLE([genblastg_threshold_whole],[w],[After searching orthologs in whole genome of counterpart species, identity larger than %f are used as best ortholog],[0.8])
# ARG_OPTIONAL_SINGLE([genblastg_identity_increase],[i],[For genblastg ortholgos, only if its identity showed increase by %f than gene annotations, then genblastg ortholgs were considered],[0.5])
# ARG_POSITIONAL_SINGLE([QRY],[Prefix of query species],[])
# ARG_POSITIONAL_SINGLE([REF],[Prefix of reference species],[])
# ARG_HELP([Curate orthologs generated by Orthogene.
#Example:
#        ./curate_ortho A188 B73
#Input files:
#        ./A188.pep ./A188.gene.bed ./A188.genome
#        ./B73.pep ./B73.gene.bed ./B73.genome
#        ./A188.B73.ortho
#Make sure ID of genes are consistent
#and chromosomes were named like 1 2 3 4..10
#])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


#TODO 规范基因命名

die()
{
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}


begins_with_short_option()
{
    local first_option all_short_options='swih'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_genblastg_threshold_syntenic="0.8"
_arg_genblastg_threshold_whole="0.8"
_arg_genblastg_identity_increase="0.5"


print_help()
{
    printf '%s\n' "Curate orthologs generated by Orthogene.
Example:
        ./curate_ortho A188 B73
Input files:
        ./A188.pep ./A188.gene.bed ./A188.genome
        ./B73.pep ./B73.gene.bed ./B73.genome
        ./A188.B73.ortho
Tips:
        Gene ID should include species prefix.
        Make sure ID of genes are consistent in all files
        and chromosomes were named like 1 2 3 4..10, 
        and bed files for genes should be sorted.
One more thing:
        Genblastg against genome is slow. If you already 
        have the result, copy to current folder like 
        * A188.pep_B73.genome 
        * A188.pep_B73.genome.pep
        * A188.pep_B73.genome.gff
        * A188.pep_B73.genome.dna 
        and those result will be reused.
"
    printf 'Usage: %s [-s|--genblastg_threshold_syntenic <arg>] [-w|--genblastg_threshold_whole <arg>] [-i|--genblastg_identity_increase <arg>] [-h|--help] <QRY> <REF>\n' "$0"
    printf '\t%s\n' "<QRY>: Prefix of query species"
    printf '\t%s\n' "<REF>: Prefix of reference species"
    printf '\t%s\n' "-s, --genblastg_threshold_syntenic: After searching orthologs in syntenic region of counterpart species, identity larger than %f are used as best ortholog (default: '0.8')"
    printf '\t%s\n' "-w, --genblastg_threshold_whole: After searching orthologs in whole genome of counterpart species, identity larger than %f are used as best ortholog (default: '0.8')"
    printf '\t%s\n' "-i, --genblastg_identity_increase: For genblastg ortholgos, only if its identity showed increase by %f than gene annotations, then genblastg ortholgs were considered (default: '0.5')"
    printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
    _positionals_count=0
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -s|--genblastg_threshold_syntenic)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_genblastg_threshold_syntenic="$2"
                shift
                ;;
            --genblastg_threshold_syntenic=*)
                _arg_genblastg_threshold_syntenic="${_key##--genblastg_threshold_syntenic=}"
                ;;
            -s*)
                _arg_genblastg_threshold_syntenic="${_key##-s}"
                ;;
            -w|--genblastg_threshold_whole)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_genblastg_threshold_whole="$2"
                shift
                ;;
            --genblastg_threshold_whole=*)
                _arg_genblastg_threshold_whole="${_key##--genblastg_threshold_whole=}"
                ;;
            -w*)
                _arg_genblastg_threshold_whole="${_key##-w}"
                ;;
            -i|--genblastg_identity_increase)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_genblastg_identity_increase="$2"
                shift
                ;;
            --genblastg_identity_increase=*)
                _arg_genblastg_identity_increase="${_key##--genblastg_identity_increase=}"
                ;;
            -i*)
                _arg_genblastg_identity_increase="${_key##-i}"
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _last_positional="$1"
                _positionals+=("$_last_positional")
                _positionals_count=$((_positionals_count + 1))
                ;;
        esac
        shift
    done
}


handle_passed_args_count()
{
    local _required_args_string="'QRY' and 'REF'"
    test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
    test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
    local _positional_name _shift_for=$1
    _positional_names="_arg_qry _arg_ref "

    shift "$_shift_for"
    for _positional_name in ${_positional_names}
    do
        test $# -gt 0 || break
        eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
        shift
    done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


#echo "Value of --option: $_arg_option"
#echo "print is $_arg_print"
#echo "Value of positional-arg: $_arg_positional_arg"

# ] <-- needed because of Argbash

#$_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
echo $_arg_genblastg_threshold_syntenic
echo $_arg_genblastg_threshold_whole
echo $_arg_genblastg_identity_increase
echo $_arg_qry
echo $_arg_ref

##--End_argbash--##

##--Initiate variables--##
GENBLASTG_THRESHOLD_SYNTENIC=$_arg_genblastg_threshold_syntenic
GENBLASTG_THRESHOLD_WHOLE=$_arg_genblastg_threshold_whole
GENBLASTG_IDENTITY_INCREASE=$_arg_genblastg_identity_increase
QRY_PREFIX=$_arg_qry
REF_PREFIX=$_arg_ref

QRY_PEP=${QRY_PREFIX}.pep
QRY_GENOME=${QRY_PREFIX}.genome
QRY_BED=${QRY_PREFIX}.gene.bed

REF_PEP=${REF_PREFIX}.pep
REF_GENOME=${REF_PREFIX}.genome
REF_BED=${REF_PREFIX}.gene.bed

ORTHO_FILE=${QRY_PREFIX}.${REF_PREFIX}.ortho

#A188_pep_B73_genome
#A188_pep_B73_genome.identity
#A188_pep_B73_genome.pro
#A188_pep_B73_genome.bed

#The directory storing python and perl scripts
ROOT=$PWD
SCRIPT_DIR=${ROOT}/scripts

#Format gene ID's into B73_Zm00001d010100
if [ ! -f rename.success ];then
    sleep 10s
    RND=`date +%s`
    for sp in ${QRY_PREFIX} ${REF_PREFIX}
    do
        mv ${sp}.pep ${sp}.pep.${RND}
        mv ${sp}.gene.bed ${sp}.gene.bed.${RND}
        python ${SCRIPT_DIR}/format.py fasta ${sp} ${sp}.pep.${RND} >      ${sp}.pep
        python ${SCRIPT_DIR}/format.py bed   ${sp} ${sp}.gene.bed.${RND} > ${sp}.gene.bed
    done
    touch rename.success
fi

for chr_id in `seq 10`
do
    DIFF_TABLE=chr${chr_id}_gene_diff.tab.out
##--Get unsyntenic genes--##
#Input:
#    The above variables
#Output:
#    chr1_gene_diff.tab.out

    grep -iv "m-to-m\|unique" ${ORTHO_FILE} >ortho.gene_key.txt
    cut -f1,2 ortho.gene_key.txt  >ortho.left_side.txt.pair
    perl ${SCRIPT_DIR}/replace.pl ortho.left_side.txt.pair ${QRY_BED} >${QRY_PREFIX}.rename.bed
#    perl addItem.pl 0 6 ortho.A188_side.txt.feature A188.rename.bed > A188.rename.bed.add_feature
#bedtools sort -i A188.rename.bed.add_feature > A188.rename.bed.add_feature.sort.bed
    for bed_ite in ${QRY_PREFIX}.rename.bed ${REF_BED}; do grep -P "^${chr_id}\t" ${bed_ite} >${bed_ite}.chr${chr_id}; done
    python ${SCRIPT_DIR}/enrich_diff.py ${QRY_PREFIX}.rename.bed.chr${chr_id} ${REF_BED}.chr${chr_id} 4 >chr${chr_id}_gene_diff.tab
    python ${SCRIPT_DIR}/get_unsyntenic_genes_syntenic_loci.py chr${chr_id}_gene_diff.tab >chr${chr_id}_gene_diff.tab.out
    grep ${QRY_PREFIX} chr${chr_id}_gene_diff.tab.out >chr${chr_id}_gene_diff.tab.out.${QRY_PREFIX}
    grep ${REF_PREFIX} chr${chr_id}_gene_diff.tab.out >chr${chr_id}_gene_diff.tab.out.${REF_PREFIX}
##--End get diff table--##


##--Recheck unsyntenic genes in syntenic loci with genblast--##
#Theory:
#   Some unsyntenic genes may be present in syntenic loci,
#   but was not annotated in gene prediction pipeline, so
#   they were not realy PAV/CNVs, this step is to filter
#   those false positives due to annotation bias.
#Input:
#   QRY.pep REF.genome unsyntenic_gene's_syntenic_loci.bed
#Parameters:
#   $GENBLASTG_THRESHOLD_SYNTENIC
#Output:
#   unsyntenic_genes_can_be_found_in_syntenic_loci.bed
#Steps:
#   1. run genblast
#   2. compute identity
#   3. filter and get bed file

for i in ${QRY_PREFIX} ${REF_PREFIX}
do
    for j in ${QRY_PREFIX} ${REF_PREFIX}
    do
        cd ${ROOT}
#${i}.pep vs ${j}.gneome
        if [ ${i} == ${j} ]
        then
            continue
        fi

        grep ${i} ${DIFF_TABLE} >${DIFF_TABLE}.${i}
#TODO fix this scripts (do not use qsub)
        if [ ! -d ${DIFF_TABLE}.${i}.genblast ]; then
            python ${SCRIPT_DIR}/check_pav_bed.py ${i}.pep ${j}.genome ${DIFF_TABLE}.${i}
        fi
#Results will be written to ${DIFF_TABLE}.${i}.genblast
        cd ${ROOT}/${DIFF_TABLE}.${i}.genblast
        sed -e 's/,\t.*//; s/,/\n/g' ../${DIFF_TABLE} > unsyntenic_genes.total
#Gather all protein files predicted by genblastg
        cat */*pro >total_genblast.pro
        cat */*gff | grep -v "^#" >total_genblast.gff
#TODO No this script yet
        perl ${SCRIPT_DIR}/gff2bed.pl total_genblast.gff >total_genblast.bed
        python ${SCRIPT_DIR}/genblast_fasta2ortho.py total_genblast.pro >total_genblast.ortho
#Compute coverage of those predicted genes
#TODO fix this scripts
        if [ ! -d workdir ]; then
            python ${SCRIPT_DIR}/parser_ortho_multiple.py ${i} total_genblast.ortho  ../${i}.pep  total_genblast.pro
        fi
#Gather all identity files
        touch total.identity && rm total.identity
        for iden_ite in workdir/*identity; do sort -k4,4g ${iden_ite} |sed -n '1p;$p' >>total.identity; done
#Make sure your gene ID's do not contain '-R', or will be accidentally removed
        cat total.identity |awk '$4 != "null" && $4 > 0.5'  > total.identity.good
        cut -f1 total.identity.good | sed 's/-R.*//' > unsyntenic_genes.FP.part1
#return
        perl ${SCRIPT_DIR}/selectItem.pl 0 3 unsyntenic_genes.FP.part1 total_genblast.bed >  unsyntenic_genes_can_be_found_in_syntenic_loci.bed
##--End Recheck unsyntenic genes in syntenic loci with genblast--##


##-Now check those unsyntenic genes on whole genome--##
#Theory:
#   If a gene's genblast hit locate apart from the best hit
#   found in predicted gene set and coverage was far better,
#   use genblast result as the bona fide ortholog.
#Input:
#   * ${i}.pep
#   * ${j}.genome
#   * unsyntenic_genes.part2
#   * ORTHO_FILE
#Parameters:
#   $GENBLASTG_THRESHOLD_WHOLE
#   $GENBLASTG_IDENTITY_INCREASE
#Output:
#   unsyntenic_genes_can_be_found_in_syntenic_loci.bed
#Steps:
#   1. run genblast
#   2. compute identity
#   3. filter and get bed file
#Still in the loop
        perl ${SCRIPT_DIR}/unselectItem.pl unsyntenic_genes.FP.part1  unsyntenic_genes.total >unsyntenic_genes.part2
#Use for flowchart
        touch NS1.0 && rm NS*
        ln -s unsyntenic_genes.part2  NS1.0
        if [ ! -d ${ROOT}/${i}.pep_${j}.genome ]; then
            wait
            sleep 1m
        elif [ ! -f ${ROOT}/${i}_pep_${j}_genome.pro ]; then
            wait
            sleep 1m
        else
#Genblast has been ran and results have been concatenated. (DNA pro gff)
            touch ${i}.pep_${j}.genome  && rm ${i}.pep_${j}.genome*
            touch ${i}_pep_${j}_genome  && rm ${i}_pep_${j}_genome*
            ln -s ${ROOT}/${i}.pep_${j}.genome
#            ln -s ${ROOT}/${i}.pep_${j}.genome/${i}_pep_${j}_genome.pro
#            ln -s ${ROOT}/${i}.pep_${j}.genome/${i}_pep_${j}_genome.bed
#            ln -s ${ROOT}/${i}.pep_${j}.genome/${i}_pep_${j}_genome.ortho
#            ln -s ${ROOT}/${i}.pep_${j}.genome/${i}_pep_${j}_genome.identity
            ln -s ${ROOT}/${i}_pep_${j}_genome.pro
            python ${SCRIPT_DIR}/genblast_fasta2ortho.py ${ROOT}/${i}_pep_${j}_genome.pro > ${i}_pep_${j}_genome.ortho
            perl ${SCRIPT_DIR}/gff2bed.pl ${ROOT}/${i}_pep_${j}_genome.gff > ${i}_pep_${j}_genome.bed
#            ln -s ${ROOT}/${i}_pep_${j}_genome.ortho
#            ln -s ${ROOT}/${i}_pep_${j}_genome.identity
        fi

#Now compute identity similar to above
#TODO
        GENBLAST_BED=${i}_pep_${j}_genome.bed
#        if [ ! -f ${ROOT}/${GENBLAST_BED} ]; then
##Change
#            python ${SCRIPT_DIR}/genblast_fasta2ortho.py ${i}_pep_${j}_genome.pro >${i}_pep_${j}_genome.ortho
#        else
#            ln -s ${ROOT}/${GENBLAST_BED}
#        fi

        IDENTITY_FILE=${i}_pep_${j}_genome.identity
        if [ ! -f ${ROOT}/${IDENTITY_FILE} ]; then
            python ${SCRIPT_DIR}/parser_ortho_multiple.py ${i} ${i}_pep_${j}_genome.ortho ${ROOT}/${i}.pep ${i}_pep_${j}_genome.pro
            touch ${IDENTITY_FILE} && rm ${IDENTITY_FILE}
##@#Get best Rank; TODO consider multiple best hit?
            for iden_ite in workdir_total/*identity; do sort -k4,4g ${iden_ite} |sed -n '1p;$p' >>${IDENTITY_FILE}; done
        else
            ln -s ${ROOT}/${IDENTITY_FILE}
        fi

        cat ${IDENTITY_FILE} |awk '$4 != "null" && $4 > 0.5'  > ${IDENTITY_FILE}.good
        perl ${SCRIPT_DIR}/selectItem.pl unsyntenic_genes.part2 ${IDENTITY_FILE}.good |cut -f1,2,5 > unsyntenic_genes.part2.genblast
        ln -s unsyntenic_genes.part2.genblast NS1.1.1
        perl ${SCRIPT_DIR}/unselectItem.pl unsyntenic_genes.part2.genblast unsyntenic_genes.part2 > NS1.1.2

#Assuming identity already calculated in ORTHO_FILE
        grep -v "m-to-m.${i}" ${ROOT}/${ORTHO_FILE} |cut -f1,2,10  > orthogene.identity
#COmment
        perl ${SCRIPT_DIR}/selectItem.pl unsyntenic_genes.part2.genblast orthogene.identity >compare_identity
        ln -s compare_identity NS1.2.1
        perl ${SCRIPT_DIR}/unselectItem.pl compare_identity unsyntenic_genes.part2.genblast > NS1.2.2

#@#Genblast has greater hits, use it
        python ${SCRIPT_DIR}/filter_identity.py compare_identity |grep "\-R"  >genblast_replace.ortholog
        ln -s genblast_replace.ortholog NS1.3.1
        perl ${SCRIPT_DIR}/unselectItem.pl genblast_replace.ortholog compare_identity > NS1.3.2

#TODO why use 0.5 as threshold
        bedtools intersect -a ${GENBLAST_BED}  -b ${ROOT}/${j}.gene.bed  -f 0.5 -wo >genblast_intersect.bed
        bedtools intersect -a ${GENBLAST_BED}  -b ${ROOT}/${j}.gene.bed  -F 0.5 -wo >>genblast_intersect.bed
        sort genblast_intersect.bed |uniq >genblast_intersect.unique.bed

#@--Now check whether overlapped with annotation set--
        perl ${SCRIPT_DIR}/unselectItem.pl  3 1 genblast_intersect.unique.bed  genblast_replace.ortholog >genblast_replace.ortholog.non-overlapped
        ln -s genblast_replace.ortholog.non-overlapped NS1.4.1
        perl ${SCRIPT_DIR}/selectItem.pl 3 1 genblast_intersect.unique.bed  genblast_replace.ortholog >NS1.4.2
        cat NS1.3.2 NS1.4.2 > NS2.0
#End iterating i and j
    done
done

#End iterating chr_id 
done
