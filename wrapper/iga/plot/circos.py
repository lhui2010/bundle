"""
Circos plot wrappers
"""
import logging
import coloredlogs

from iga.annotation.gff import BED
from iga.apps.base import emain, mkdir, Config

logger = logging.getLogger(__name__)
coloredlogs.install(level='DEBUG', logger=logger)

def anchors_to_segdups(anchors=None, gene_bed=None):
    r"""
    Convert the anchors identified by MCScanX with gene location information (bed) to seg_dups used in circos
    :param anchors: anchor file built by jcvi, or the pair of orthologs described in the first two column
    :param gene_bed: gene bed files, could be generated by python -m iga.annotation.gff gff2bed gff [output: gff.bed]
    :return: the name of the segdups file, default is anchors + "seg_dups.txt"
    """
    #Read bed in to dict
    gene_bed_data = BED(gene_bed)
    #Read anchors and output anchors with bed information
    seg_dups_file = anchors + 'seg_dups.txt'
    seg_dups_buff = ''
    with open(anchors) as fh:
        for line in fh:
            if line.startswith('#'):
                continue
            mylist = line.split()
            (orthoA, orthoB) = mylist[:2]
            orthoA_bed = gene_bed_data.select_name(orthoA)
            orthoB_bed = gene_bed_data.select_name(orthoB)
            seg_line_list = [orthoA_bed.chr, orthoA_bed.start, orthoA_bed.end,
                orthoB_bed.chr, orthoB_bed.start, orthoB_bed.end]
            seg_dups_buff += "  ".join(seg_line_list) + "\n"
    with open(seg_dups_file, 'w') as fh:
        fh.write(seg_dups_buff)
    return seg_dups_file

class Circos:
    """
    The circos class, support:
        Add plot structure like ggplot +
        Plot with available data
    Note:
        Because it's a little complicated, I used class instead of simple sh.format().
    """

    def __init__(self, karyotype_file):
        self.karyotype = ''
        self.link = ''
        self.ideogram = ''
        self.hist = []
        self.cytogenetic_bands = ''

        self.image_conf="""dir   = .
file  = circos.png
png   = yes
svg   = yes

# radius of inscribed circle in image
radius         = 1500p

# by default angle=0 is at 3 o'clock position
angle_offset      = -87.8
#angle_orientation = counterclockwise

auto_alpha_colors = yes
auto_alpha_steps  = 5
<<include background.white.conf>>
"""
        self.background_conf = """background = white
"""
        self.ideogram_conf = """
<ideogram>

<spacing>
default = 0.005r

<pairwise chr12 chr01>
spacing = 3r #re lative to default spacing
</pairwise>

</spacing>

# Ideogram position, fill and outline
radius           = 0.9r
thickness        = 20p
fill             = yes
stroke_color     = dgrey
stroke_thickness = 2p

# Minimum definition for ideogram labels.

show_label       = yes
# see etc/fonts.conf for list of font names
label_font       = default 
label_radius     = dims(image,radius)-60p
label_size       = 30
label_parallel   = yes

</ideogram>

"""
        self.circos_conf = Config('circos')
        self.circos_conf.update('karyotype={}'.format(karyotype_file))

    def prepare_conf(self, hist_file=[], link_file=''):
        """
        prepare circos directory
        :return:
        """
        mkdir('data')
        mkdir('etc')
        with open('etc/image.conf', 'w') as fh:
            fh.write(self.image_conf)
        with open('etc/background.white.conf', 'w') as fh:
            fh.write(self.background_conf)
        with open('circos.conf', 'w') as fh:
            fh.write(self.circos_conf)
        with open('ideogram.conf', 'w') as fh:
            fh.write(self.ideogram_conf)

    def add_hist(self, hist_file='', plot_type=''):
        self.circos_conf.update('plots.plot')

    def plot(self):


def circos(fai=None, gene_gff='', gene_bed='', repeat_gff='', ortholog=''):
    karyotype_file = fai_to_karyotype(fai)
    if ortholog != '':
        seg_dups_file = anchors_to_segdups(ortholog)
    if gene_gff != '':
        gene_hist_file = gff_to_density(gene_gff)
    if repeat_gff != '':
        repeat_hist_file = gff_to_density(repeat_gff)

    circos_sh.format()


if __name__ == "__main__":
    emain()
